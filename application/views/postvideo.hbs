<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Post Video</title>
    <link rel="stylesheet" type="text/css" href="../../css/style.css" />
</head>

<body>
    <h1> Post Video</h1>
    <nav>
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="./login">Login</a></li>
            <li><a href="./registration">Registration</a></li>
            <li><a href="./postvideo">Post Video</a></li>
            <li><a href="./postview">View Post</a></li>
            <li><a href="./profile">Profile</a></li>
        </ul>
    </nav>

    <main>
        <form action="#" id="upload-post-form">
            <label for="post-title"> Post Title:</label><br>
            <input type="text" id="post-title" name="post-title" required><br>

            <label for="post-description">Post Description</label><br>
            <textarea id="post-description" name="post_description" rows="5" cols="30" required></textarea><br>

            <label for="video-file">Select a video file:</label><br>
            <input type="file" id="video-file" name="video-file" accept="video/*" required /><br>

            <label for="accept-policy">Acceptable Use Policy:</label><br>
            <input type="checkbox" id="accept-policy" name="accept-policy" required>
            <label for="accept-policy">I agree to Acceptable Use Policy.</label><br>

            <input type="submit" value="Submit">
        </form>
    </main>

    <footer>
        <p>&copy; Sanna Mohabbat</p>
    </footer>

    <script>


        const form = document.getElementById('upload-post-form');
        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            const thumbnailFile = document.getElementById('video-file').files[0];
            const title = document.getElementById("post-title").value;
            const content = document.getElementById("post-description").value;

            const thumbnailBlob = await generateThumbnail(thumbnailFile);
            const thumbnailBinary = await readFileAsBinary(thumbnailBlob);



            const formData = {
                thumbnail: Array.from(thumbnailBinary),
                title,
                content
            };

            try {
                const response = await fetch('/posts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData),
                });

                if (response.ok) {
                    console.log('Thumbnail uploaded successfully');
                } else {
                    const errorData = await response.json();
                    console.error(errorData.error);
                }
            } catch (error) {
                console.error('Error occurred while uploading thumbnail:', error);
            }
        });

        function readFileAsBinary(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();

                reader.onload = () => {
                    const arrayBuffer = reader.result;
                    const binaryData = new Uint8Array(arrayBuffer);
                    resolve(binaryData);
                };

                reader.onerror = reject;
                reader.readAsArrayBuffer(file);
            });
        }
        function generateThumbnail(videoFile) {
            return new Promise((resolve, reject) => {
                const video = document.createElement('video');
                video.preload = 'metadata';

                video.onloadedmetadata = function () {
                    // Create a canvas element to draw the video frame
                    const canvas = document.createElement('canvas');
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;

                    // Draw the first video frame onto the canvas
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

                    // Convert the canvas image to a Blob object
                    canvas.toBlob(resolve, 'image/jpeg');
                };

                video.onerror = reject;

                // Set the video source
                const videoURL = URL.createObjectURL(videoFile);
                video.src = videoURL;
            });
        }

    </script>
</body>

</html>